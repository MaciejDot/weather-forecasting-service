{"version":3,"sources":["pages/error/Error404.tsx","components/LookupWeatherCard.tsx","contexts/GeoLocationContext.ts","hooks/useGeoLocation.ts","pages/main/Main.tsx","components/TemperatureDetails.tsx","components/WeatherDataAndDescription.tsx","hooks/useTypedStyles.ts","theme/basicClasses.ts","components/WeatherDetails.tsx","components/LocationViewBody.tsx","components/LocationBar.tsx","pages/location/LocationDetails.tsx","pages/location/MyLocationDetails.tsx","App.tsx","index.tsx"],"names":["Error404","Typography","variant","align","LookupWeatherCard","props","Card","CardActionArea","component","Link","to","CardContent","Grid","container","item","xs","locationLabel","temp","toFixed","geoLocationInitialValues","isError","isLoading","location","latitude","longitude","alreadyRequested","setAlreadyRequested","setLocation","setIsLoading","setIsError","GeoLocationContext","React","createContext","useGeoLocation","geo","useContext","navigator","geolocation","getCurrentPosition","position","coords","Dashboard","apiKey","process","londonQuery","useQuery","fetch","then","res","json","berlinQuery","myLocationQuery","enabled","Alert","severity","alignItems","spacing","justifyContent","lg","Skeleton","animation","height","data","main","TemperatureDetails","weatherKind","length","reduce","a","b","highTemp","lowTemp","WeatherDataAndDescription","description","useTypedStyles","styleDef","makeStyles","basicClasses","theme","root","backgroundColor","boxShadow","rightSeparationBorder","borderRight","borderRightWidth","borderColor","palette","type","bottomSeparationBorder","borderBottom","borderBottomWidth","marginTopCentering","marginTop","WeatherDetails","format_time","utc_timestamp","timezone","Intl","DateTimeFormat","timeStyle","timeZone","format","addSeconds","Date","classes","className","sunrise","sunset","humidity","visibility","LocationViewBody","LocationBar","IconButton","ArrowBackIos","label","LocationDetails","cityName","useParams","query","Helmet","temp_max","temp_min","weather","map","x","sys","MyLocationDetails","client","QueryClient","defaultOptions","queries","cacheTime","staleTime","App","Path","path","exact","title","children","prefersDarkMode","useMediaQuery","useEffect","document","getElementsByTagName","style","useMemo","createTheme","geoLocationContextValues","useState","useSetupLocationContextValues","ThemeProvider","Paper","Provider","value","QueryClientProvider","basename","Main","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5ca09566.chunk.js","sourcesContent":["import { Typography } from '@material-ui/core';\r\nconst Error404 =() => {\r\n    return (\r\n        <>\r\n        <Typography variant=\"h2\" align=\"center\">404</Typography>\r\n        <Typography variant=\"h4\" align=\"center\">Page not found</Typography>\r\n        </>\r\n    )\r\n};\r\nexport default Error404;","import { Card, CardActionArea, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\ninterface LookupWeatherCardProps {\r\n    locationLabel: string\r\n    temp?: number\r\n    to: string\r\n}\r\n\r\nconst LookupWeatherCard = (props: LookupWeatherCardProps) => {\r\n    return <Card>\r\n        <CardActionArea component={Link} to={props.to}>\r\n        <CardContent>\r\n        <Grid container>\r\n            <Grid item xs={6}>\r\n                <Typography variant=\"h6\" align='left'>{props.locationLabel}</Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Typography variant=\"h6\" align='right'>{props.temp?.toFixed(0)??'-'}°C</Typography>\r\n            </Grid>\r\n        </Grid>\r\n        </CardContent>\r\n        </CardActionArea>\r\n    </Card>\r\n}\r\n\r\nexport default LookupWeatherCard;","import React, { useState } from \"react\";\r\n\r\nconst geoLocationInitialValues = {\r\n        isError: false,\r\n        isLoading: true,\r\n        location:{latitude:0, longitude:0 },\r\n        alreadyRequested: false,\r\n        setAlreadyRequested: (alreadyRequested: boolean)=> {},\r\n        setLocation:(location: {latitude:number, longitude:number })=>{},\r\n        setIsLoading: (isLoading: boolean)=>{},\r\n        setIsError:(isError: boolean)=>{}\r\n    }\r\n\r\nexport const useSetupLocationContextValues=  ()=>{\r\n    const [isError, setIsError] = useState(geoLocationInitialValues.isError)\r\n    const [location, setLocation] = useState(geoLocationInitialValues.location);\r\n    const [isLoading, setIsLoading] = useState(geoLocationInitialValues.isLoading);\r\n    const [alreadyRequested, setAlreadyRequested] = useState(geoLocationInitialValues.alreadyRequested);\r\n    return { isError, setIsError, setIsLoading, setLocation, isLoading, location, alreadyRequested, setAlreadyRequested }\r\n}\r\n\r\nexport const GeoLocationContext = React.createContext(geoLocationInitialValues);","import { useContext } from \"react\";\r\nimport { GeoLocationContext } from \"../contexts/GeoLocationContext\";\r\n\r\nexport function useGeoLocation(){\r\n    const geo = useContext(GeoLocationContext)\r\n    !geo.alreadyRequested && navigator.geolocation.getCurrentPosition(\r\n        position=>{\r\n            geo.setAlreadyRequested(true)\r\n            geo.setLocation({ latitude: position.coords.latitude, longitude: position.coords.longitude})\r\n            geo.setIsLoading(false);\r\n            geo.setIsError(false);\r\n        },\r\n        ()=> {\r\n            geo.setAlreadyRequested(true);\r\n            geo.setIsError(true)\r\n        }\r\n    );\r\n    return { isError:geo.isError,location: geo.location, isLoading:geo.isLoading}\r\n}","import { Grid, Typography } from \"@material-ui/core\"\r\nimport { useQuery } from \"react-query\";\r\nimport { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\r\nimport LookupWeatherCard from \"../../components/LookupWeatherCard\";\r\nimport { useGeoLocation } from \"../../hooks/useGeoLocation\"\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst Dashboard = () => {\r\n    const geo = useGeoLocation();\r\n\r\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\r\n\r\n    const londonQuery = useQuery<WeatherDataModel>(\"london-weather\", () =>\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=London&appid=${apiKey}&units=metric`).then(res => res.json()))\r\n\r\n    const berlinQuery = useQuery<WeatherDataModel>(\"berlin-weather\", () =>\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=Berlin&appid=${apiKey}&units=metric`).then(res => res.json()))\r\n\r\n    const myLocationQuery = useQuery<WeatherDataModel>(\"my-location-weather\", () =>\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${geo.location.latitude}&lon=${geo.location.longitude}&units=metric&appid=${apiKey}`).then(res => res.json()), {\r\n        enabled: !geo.isLoading && !geo.isError\r\n    })\r\n\r\n    return (<>\r\n        <Typography variant='h5' align='center'>\r\n            Dashboard\r\n        </Typography>\r\n        {geo.isError && <Alert severity='error'>Turn on location in your browser to see weather result for your city</Alert>}\r\n        {myLocationQuery.isError && <Alert severity='error'>Error during fetching temperature data for your location</Alert>}\r\n        {berlinQuery.isError && <Alert severity='error'>Error during fetching temperature data for Berlin</Alert>}\r\n        {londonQuery.isError && <Alert severity='error'>Error during fetching temperature data for London</Alert>}\r\n        <Grid container alignItems='center' spacing={3} justifyContent='space-evenly'>\r\n            <Grid item xs={12} lg={4}>\r\n                {myLocationQuery.isLoading || geo.isLoading ? <Skeleton animation=\"wave\" height={64} /> : <LookupWeatherCard locationLabel=\"My Location\" temp={myLocationQuery?.data?.main?.temp} to='/location' />}\r\n            </Grid>\r\n            <Grid item xs={12} lg={4}>\r\n                {berlinQuery.isLoading ? <Skeleton animation=\"wave\" height={64} /> : <LookupWeatherCard locationLabel=\"Berlin\" temp={berlinQuery?.data?.main?.temp} to='/location/Berlin' />}\r\n            </Grid>\r\n            <Grid item xs={12} lg={4}>\r\n                {londonQuery.isLoading ? <Skeleton animation=\"wave\" height={64} /> : <LookupWeatherCard locationLabel=\"London\" temp={londonQuery?.data?.main?.temp} to='/location/London' />}\r\n            </Grid>\r\n        </Grid>\r\n    </>)\r\n}\r\n\r\nexport default Dashboard;","import { Typography } from \"@material-ui/core\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport React from \"react\";\r\n\r\ninterface TemperatureDetailsProps{\r\n    isLoading: boolean,\r\n    isError: boolean\r\n    weatherKind?: string[],\r\n    highTemp?: number,\r\n    lowTemp?: number,\r\n    temp?: number\r\n}\r\n\r\nconst TemperatureDetails = (props: TemperatureDetailsProps)=>{\r\n    return (<>\r\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \r\n        <Typography variant='subtitle1' align='center'>\r\n            {props.isError ? '--' : (props.weatherKind.length && props.weatherKind.reduce((a,b)=>`${a},${b}`))??'--'}\r\n        </Typography>}\r\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \r\n        <Typography variant='h5' align='center'>\r\n                {props.isError ? '--':props.temp?.toFixed(0)??'--'} °C\r\n        </Typography>}\r\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \r\n        <Typography variant='h6' align='center'>\r\n            H:{props.isError ? '--':props.highTemp?.toFixed(0)??'--'}°C&nbsp;L:{props.isError ? '--':props.lowTemp?.toFixed(0)??'--'}°C\r\n        </Typography>\r\n        }\r\n    </>)}\r\n\r\nexport default TemperatureDetails","import { Typography } from \"@material-ui/core\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\n\r\ninterface WeatherDataAndDescriptionProps {\r\n    description: string\r\n    data: string\r\n    isLoading: boolean\r\n}\r\n\r\nconst WeatherDataAndDescription = (props: WeatherDataAndDescriptionProps) => {\r\n    return <>\r\n        <Typography variant='subtitle1' align='center'>\r\n            {props.description}\r\n        </Typography>\r\n        {props.isLoading ?<Skeleton animation='wave' height={50}/>:<Typography variant=\"h6\" align='center'>\r\n            {props.data}\r\n        </Typography>}\r\n    </>\r\n}\r\n\r\nexport default WeatherDataAndDescription;","import { makeStyles } from \"@material-ui/core\";\r\nimport { ClassesBaseType } from \"../theme/ClassesBaseType\";\r\n\r\nconst useTypedStyles =<TClasses extends ClassesBaseType>(styleDef : TClasses)=>{\r\n    return makeStyles(styleDef)() as Record<keyof ReturnType<TClasses>, string>\r\n}\r\n\r\nexport default useTypedStyles;","import { Theme } from \"@material-ui/core\";\r\n\r\nexport const basicClasses = (theme: Theme) => ({\r\n    root: {\r\n        backgroundColor: 'transparent',\r\n        boxShadow: 'none',\r\n    },\r\n    rightSeparationBorder: {\r\n        borderRight: 'solid',\r\n        borderRightWidth: '0.5px',\r\n        borderColor: theme.palette.type === 'dark' ? 'rgba(150, 150, 150, 0.12)' : 'rgba(100, 100, 100, 0.12)'\r\n    },\r\n    bottomSeparationBorder: {\r\n        borderBottom: 'solid',\r\n        borderBottomWidth: '0.5px',\r\n        borderColor: theme.palette.type === 'dark' ? 'rgba(150, 150, 150, 0.12)' : 'rgba(100, 100, 100, 0.12)'\r\n    },\r\n    marginTopCentering: {\r\n        marginTop: '12px'\r\n    }\r\n})","import { Grid } from \"@material-ui/core\";\r\nimport WeatherDataAndDescription from \"./WeatherDataAndDescription\";\r\nimport { addSeconds } from 'date-fns'\r\nimport useTypedStyles from \"../hooks/useTypedStyles\";\r\nimport { basicClasses } from \"../theme/basicClasses\";\r\n\r\ninterface WeatherDetailsProps {\r\n    isError: boolean\r\n    isLoading: boolean\r\n    sunrise?: number\r\n    sunset?: number\r\n    humidity?: number\r\n    visibility?: number\r\n    timezone?: number\r\n}\r\n\r\nconst WeatherDetails = (props: WeatherDetailsProps) => {\r\n    const format_time = (utc_timestamp: number, timezone: number) => {\r\n        const dtFormat = new Intl.DateTimeFormat('pl-PL', {\r\n            timeStyle: 'short',\r\n            timeZone: 'UTC'\r\n        });\r\n        return dtFormat.format(addSeconds(new Date(utc_timestamp * 1e3), timezone));\r\n    }\r\n    const classes = useTypedStyles(basicClasses);\r\n    return <><Grid container alignItems='center' spacing={3} justifyContent='space-evenly' className={classes.bottomSeparationBorder}>\r\n        <Grid item xs={6}\r\n            className={classes.rightSeparationBorder}\r\n        >\r\n            <WeatherDataAndDescription\r\n                description=\"Sunrise\"\r\n                isLoading={props.isLoading}\r\n                data={props.isError || props.isLoading ? '--:--' : format_time(props.sunrise ?? 0, props.timezone ?? 0)}\r\n            />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            <WeatherDataAndDescription\r\n                description=\"Sunset\"\r\n                isLoading={props.isLoading}\r\n                data={props.isError || props.isLoading ? '--:--' : format_time(props.sunset ?? 0, props.timezone ?? 0)}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n        <Grid container alignItems='center' spacing={3} justifyContent='space-evenly' className={classes.marginTopCentering}>\r\n            <Grid item xs={6} className={classes.rightSeparationBorder}>\r\n                <WeatherDataAndDescription\r\n                    description=\"Humidity\"\r\n                    isLoading={props.isLoading}\r\n                    data={props.isError || props.isLoading ? '--.-- %' : `${props.humidity.toFixed(0)} %`}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <WeatherDataAndDescription\r\n                    description=\"Visibility\"\r\n                    isLoading={props.isLoading}\r\n                    data={props.isError || props.isLoading ? '--.-- km' : `${(props.visibility / 1000).toFixed(2)} km`}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\nexport default WeatherDetails;","import { Grid } from \"@material-ui/core\";\r\nimport TemperatureDetails from \"./TemperatureDetails\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\n\r\n\r\ninterface LocationViewBodyProps {\r\n    isError: boolean\r\n    isLoading: boolean\r\n    temp?: number\r\n    highTemp?: number\r\n    lowTemp?: number\r\n    weatherKind?: string[]\r\n\r\n    sunrise?: number\r\n    sunset?: number\r\n    humidity?: number\r\n    visibility?: number,\r\n    timezone?: number\r\n}\r\n\r\n\r\nconst LocationViewBody = (props: LocationViewBodyProps) => {\r\n\r\n    return <Grid container alignItems='center' spacing={3} justifyContent='space-evenly'>\r\n        <Grid item xs={12} lg={6}>\r\n            <TemperatureDetails\r\n                {...props}\r\n            />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6}>\r\n            <WeatherDetails\r\n                {...props}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\nexport default LocationViewBody;","import { IconButton, Grid, Typography } from \"@material-ui/core\";\r\nimport { ArrowBackIos } from \"@material-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\ninterface LocationBarProps {\r\n    label: string\r\n}\r\nconst LocationBar = (props: LocationBarProps) => {\r\n    return <Grid container>\r\n        <Grid item xs={1}>\r\n            <IconButton\r\n                component={Link} to='/'\r\n            >\r\n                <ArrowBackIos />\r\n            </IconButton>\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n            <Typography variant='h5' align='center'>\r\n                {props.label}\r\n            </Typography>\r\n        </Grid>\r\n    </Grid>\r\n}\r\nexport default LocationBar;","import { useQuery } from \"react-query\";\r\nimport { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport LocationViewBody from \"../../components/LocationViewBody\";\r\nimport LocationBar from \"../../components/LocationBar\";\r\n\r\nconst LocationDetails = () => {\r\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\r\n    const { cityName } = useParams();\r\n    const query = useQuery<WeatherDataModel>(`${cityName}-weather`, () =>\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric`).then(res => res.json()));\r\n\r\n    const data = query.data;\r\n    return <>  <Helmet>\r\n        <title>Weather in {cityName}</title>\r\n    </Helmet>\r\n        <LocationBar label={cityName}/>\r\n        {query.isError && <Alert severity='error'>Error during fetching temperature data for {cityName}</Alert>}\r\n        <LocationViewBody\r\n            isError={query.isError}\r\n            isLoading={query.isLoading}\r\n            timezone={data?.timezone}\r\n            temp={data?.main.temp}\r\n            highTemp={data?.main?.temp_max}\r\n            lowTemp={data?.main?.temp_min}\r\n            weatherKind={data?.weather?.map(x => x.main)}\r\n            sunrise={data?.sys?.sunrise}\r\n            sunset={data?.sys?.sunset}\r\n            humidity={data?.main?.humidity}\r\n            visibility={data?.visibility}\r\n        />\r\n    </>\r\n}\r\n\r\nexport default LocationDetails;","import { useQuery } from \"react-query\";\r\nimport { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\r\nimport { useGeoLocation } from \"../../hooks/useGeoLocation\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport LocationBar from \"../../components/LocationBar\";\r\nimport LocationViewBody from \"../../components/LocationViewBody\";\r\n\r\nconst MyLocationDetails = ()=>{\r\n    const geo = useGeoLocation();\r\n\r\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\r\n    const query = useQuery<WeatherDataModel>(\"my-location-weather\", ()=> \r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${geo.location.latitude}&lon=${geo.location.longitude}&units=metric&appid=${apiKey}`).then(res=>res.json()),{\r\n            enabled: !geo.isLoading && !geo.isError\r\n        })\r\n\r\n    const data = query.data;\r\n\r\n    return <>\r\n     <LocationBar label=\"My Location\"/>\r\n     {geo.isError && <Alert severity='error'>Turn on location in your browser to see weather result for your city</Alert>}\r\n     {query.isError && <Alert severity='error'>Error during fetching temperature data for your location</Alert>}\r\n       <LocationViewBody\r\n        isError={query.isError || geo.isError}\r\n        timezone={data?.timezone}\r\n        isLoading={query.isLoading || geo.isLoading}\r\n        temp={data?.main.temp}\r\n        highTemp={data?.main?.temp_max}\r\n        lowTemp={data?.main?.temp_min}\r\n        weatherKind={data?.weather?.map(x => x.main)}\r\n        sunrise={data?.sys?.sunrise}\r\n        sunset={data?.sys?.sunset}\r\n        humidity={data?.main?.humidity}\r\n        visibility={data?.visibility}\r\n       />\r\n    </>\r\n}\r\n\r\nexport default MyLocationDetails;","import React, { useEffect, useMemo } from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Error404 from './pages/error/Error404';\r\nimport Main from './pages/main/Main';\r\nimport { QueryClient, QueryClientProvider } from 'react-query'\r\nimport LocationDetails from './pages/location/LocationDetails';\r\nimport MyLocationDetails from './pages/location/MyLocationDetails';\r\nimport { GeoLocationContext, useSetupLocationContextValues } from './contexts/GeoLocationContext';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { createTheme, Paper, ThemeProvider } from '@material-ui/core';\r\nimport useTypedStyles from './hooks/useTypedStyles';\r\nimport { basicClasses } from './theme/basicClasses';\r\n\r\nconst client = new QueryClient({\r\n    defaultOptions: {\r\n        queries: {\r\n            cacheTime: 60 * 1000,\r\n            staleTime: 30 * 1000\r\n        }\r\n    }\r\n})\r\n\r\nfunction App() {\r\n    const Path = (props: { children?: React.ReactNode, title: string, path: string, exact?: boolean }) =>\r\n        <Route path={props.path} exact={props.exact}>\r\n            <Helmet>\r\n                <title>{props.title}</title>\r\n            </Helmet>\r\n            {props.children}\r\n        </Route>\r\n\r\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n\r\n    useEffect(() => {\r\n        /*body element is outside react dom so there is no way to reference it by react*/\r\n        document.getElementsByTagName('body')[0].style.backgroundColor = prefersDarkMode ? 'black' : 'white'\r\n    }, [prefersDarkMode]);\r\n\r\n    const theme = useMemo(\r\n        () =>\r\n            createTheme({\r\n                palette: {\r\n                    type: prefersDarkMode ? 'dark' : 'light',\r\n                },\r\n            }),\r\n        [prefersDarkMode],\r\n    );\r\n\r\n    const geoLocationContextValues = useSetupLocationContextValues()\r\n\r\n    const classes = useTypedStyles(basicClasses);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Paper className={classes.root}>\r\n                <GeoLocationContext.Provider value={geoLocationContextValues}>\r\n                    <QueryClientProvider client={client}>\r\n                        <Router basename=\"/\">\r\n                            <Switch>\r\n                                <Path exact path=\"/location\" title=\"Weather in my location\">\r\n                                    <MyLocationDetails />\r\n                                </Path>\r\n                                <Route exact path=\"/location/:cityName\">\r\n                                    <LocationDetails />\r\n                                </Route>\r\n                                <Path exact path=\"/\" title=\"Wheater Forecasting Service\">\r\n                                    <Main />\r\n                                </Path>\r\n                                <Path path=\"*\" title=\"404 page not found\">\r\n                                    <Error404 />\r\n                                </Path>\r\n                            </Switch>\r\n                        </Router>\r\n                    </QueryClientProvider>\r\n                </GeoLocationContext.Provider>\r\n            </Paper>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}