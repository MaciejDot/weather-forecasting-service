{"version":3,"sources":["enums/GeoLocationStatusEnum.ts","pages/error/Error404.tsx","components/LookupWeatherCard.tsx","contexts/GeoLocationContext.ts","hooks/useGeoLocation.ts","hooks/useFetchQuery.ts","fetch/fetchResourceThrowOnError.ts","pages/main/Main.tsx","components/TemperatureDetails.tsx","components/WeatherDataAndDescription.tsx","hooks/useTypedStyles.ts","theme/basicClasses.ts","components/WeatherDetails.tsx","components/LocationViewBody.tsx","components/LocationBar.tsx","pages/location/LocationDetails.tsx","pages/location/MyLocationDetails.tsx","App.tsx","index.tsx"],"names":["GeoLocationStatusEnum","Error404","Typography","variant","align","LookupWeatherCard","props","Card","CardActionArea","component","Link","to","CardContent","Grid","container","item","xs","locationLabel","temp","toFixed","geoLocationInitialValues","status","Undefined","isLoading","location","latitude","longitude","alreadyRequested","setAlreadyRequested","setLocation","setIsLoading","setStatus","GeoLocationContext","React","createContext","useGeoLocation","geo","useContext","navigator","geolocation","getCurrentPosition","position","coords","Success","ErrorUserOrDeviceRejection","ErrorLocationIsNotAvailableInBrowser","useFetchQuery","resocure","options","useQuery","fetch","then","res","ok","json","Error","fetchResocureThrowOnError","Dashboard","apiKey","londonQuery","berlinQuery","myLocationQuery","enabled","useEffect","console","log","Alert","severity","isError","alignItems","spacing","justifyContent","lg","Skeleton","animation","height","data","main","TemperatureDetails","weatherKind","length","reduce","a","b","highTemp","lowTemp","WeatherDataAndDescription","description","useTypedStyles","styleDef","makeStyles","basicClasses","theme","root","backgroundColor","boxShadow","rightSeparationBorder","borderRight","borderRightWidth","borderColor","palette","type","bottomSeparationBorder","borderBottom","borderBottomWidth","marginTopCentering","marginTop","WeatherDetails","format_time","utc_timestamp","timezone","Intl","DateTimeFormat","timeStyle","timeZone","format","addSeconds","Date","classes","className","sunrise","sunset","humidity","visibility","LocationViewBody","LocationBar","IconButton","ArrowBackIos","label","LocationDetails","cityName","useParams","query","process","Helmet","temp_max","temp_min","weather","map","x","sys","MyLocationDetails","includes","client","QueryClient","defaultOptions","queries","cacheTime","staleTime","App","Path","path","exact","title","children","prefersDarkMode","useMediaQuery","document","getElementsByTagName","style","useMemo","createTheme","geoLocationContextValues","useState","useSetupLocationContextValues","ThemeProvider","Paper","Provider","value","QueryClientProvider","Main","ReactDOM","render","basename","getElementById"],"mappings":"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","file":"static/js/main.31d2316d.chunk.js","sourcesContent":["export enum GeoLocationStatusEnum{\n    Undefined = 0,\n    Success = 1,\n    ErrorUserOrDeviceRejection = 2,\n    ErrorLocationIsNotAvailableInBrowser = 3\n}","import { Typography } from '@material-ui/core';\nconst Error404 =() => {\n    return (\n        <>\n        <Typography variant=\"h2\" align=\"center\">404</Typography>\n        <Typography variant=\"h4\" align=\"center\">Page not found</Typography>\n        </>\n    )\n};\nexport default Error404;","import { Card, CardActionArea, CardContent, Grid, Typography } from \"@material-ui/core\";\nimport {\n    Link\n} from \"react-router-dom\";\n\ninterface LookupWeatherCardProps {\n    locationLabel: string\n    temp?: number\n    to: string\n}\n\nconst LookupWeatherCard = (props: LookupWeatherCardProps) => {\n    return <Card>\n        <CardActionArea component={Link} to={props.to}>\n        <CardContent>\n        <Grid container>\n            <Grid item xs={6}>\n                <Typography variant=\"h6\" align='left'>{props.locationLabel}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <Typography variant=\"h6\" align='right'>{props.temp?.toFixed(0)??'-'}°C</Typography>\n            </Grid>\n        </Grid>\n        </CardContent>\n        </CardActionArea>\n    </Card>\n}\n\nexport default LookupWeatherCard;","import React, { useState } from \"react\";\nimport { GeoLocationStatusEnum } from \"../enums/GeoLocationStatusEnum\";\n\nconst geoLocationInitialValues = {\n        status: GeoLocationStatusEnum.Undefined,\n        isLoading: true,\n        location:{latitude:0, longitude:0 },\n        alreadyRequested: false,\n        setAlreadyRequested: (alreadyRequested: boolean)=> {},\n        setLocation:(location: {latitude:number, longitude:number })=>{},\n        setIsLoading: (isLoading: boolean)=>{},\n        setStatus:(status: GeoLocationStatusEnum)=>{}\n    }\n\nexport const useSetupLocationContextValues=  ()=>{\n    const [status, setStatus] = useState(geoLocationInitialValues.status)\n    const [location, setLocation] = useState(geoLocationInitialValues.location);\n    const [isLoading, setIsLoading] = useState(geoLocationInitialValues.isLoading);\n    const [alreadyRequested, setAlreadyRequested] = useState(geoLocationInitialValues.alreadyRequested);\n    return { status, setStatus, setIsLoading, setLocation, isLoading, location, alreadyRequested, setAlreadyRequested }\n}\n\nexport const GeoLocationContext = React.createContext(geoLocationInitialValues);","import { useContext } from \"react\";\nimport { GeoLocationContext } from \"../contexts/GeoLocationContext\";\nimport { GeoLocationStatusEnum } from \"../enums/GeoLocationStatusEnum\";\n\nexport function useGeoLocation(){\n    const geo = useContext(GeoLocationContext)\n    if(!geo.alreadyRequested && navigator.geolocation) navigator.geolocation.getCurrentPosition(\n        position=>{\n            geo.setAlreadyRequested(true)\n            geo.setLocation({ latitude: position.coords.latitude, longitude: position.coords.longitude})\n            geo.setIsLoading(false);\n            geo.setStatus(GeoLocationStatusEnum.Success);\n        },\n        ()=> {\n            geo.setAlreadyRequested(true);\n            geo.setStatus(GeoLocationStatusEnum.ErrorUserOrDeviceRejection)\n        }\n    );\n    if(!navigator.geolocation)\n    {\n        geo.setStatus(GeoLocationStatusEnum.ErrorLocationIsNotAvailableInBrowser);\n        geo.setIsLoading(false);\n        geo.setAlreadyRequested(true);\n    }\n    return { status: geo.status, location: geo.location, isLoading:geo.isLoading}\n}","import { QueryKey, useQuery, UseQueryOptions } from \"react-query\"\nimport { fetchResocureThrowOnError } from \"../fetch/fetchResourceThrowOnError\"\n\nexport const useFetchQuery = <T>(resocure: string, options?: UseQueryOptions<T, unknown,T, QueryKey>)=> useQuery<T>(resocure, ()=> fetchResocureThrowOnError(resocure), options)","export const fetchResocureThrowOnError = (resocure: string) => \n{\n    return fetch(resocure).then(res => {\n        if(res.ok)\n            return res.json()\n        throw new Error(\"api fetch was unsuccesfull\")\n        })\n}","import { Grid, Typography } from \"@material-ui/core\"\nimport { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\nimport LookupWeatherCard from \"../../components/LookupWeatherCard\";\nimport { useGeoLocation } from \"../../hooks/useGeoLocation\"\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Alert from '@material-ui/lab/Alert';\nimport { useEffect } from \"react\";\nimport { useFetchQuery } from \"../../hooks/useFetchQuery\";\nimport { GeoLocationStatusEnum } from \"../../enums/GeoLocationStatusEnum\";\n\nconst Dashboard = () => {\n    const geo = useGeoLocation();\n\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY + 'nor_valid';\n\n    const londonQuery = useFetchQuery<WeatherDataModel>(`https://api.openweathermap.org/data/2.5/weather?q=London&appid=${apiKey}&units=metric`)\n\n    const berlinQuery = useFetchQuery<WeatherDataModel>(`https://api.openweathermap.org/data/2.5/weather?q=Berlin&appid=${apiKey}&units=metric`)\n\n    const myLocationQuery = useFetchQuery<WeatherDataModel>(`https://api.openweathermap.org/data/2.5/weather?lat=${geo.location.latitude}&lon=${geo.location.longitude}&units=metric&appid=${apiKey}`, {\n        enabled: !geo.isLoading && geo.status === GeoLocationStatusEnum.Success\n    })\n\n    useEffect(()=>{console.log(londonQuery)}, [londonQuery])\n\n    return (<>\n        <Typography variant='h5' align='center'>\n            Dashboard\n        </Typography>\n        {GeoLocationStatusEnum.ErrorUserOrDeviceRejection === geo.status && <Alert severity='error'>Turn on location in your browser to see weather result for your city</Alert>}\n        {GeoLocationStatusEnum.ErrorLocationIsNotAvailableInBrowser === geo.status && <Alert severity='error'>Location api is not available in your current browser application may don't work properly</Alert>}\n        {myLocationQuery.isError && <Alert severity='error'>Error during fetching temperature data for your location</Alert>}\n        {berlinQuery.isError && <Alert severity='error'>Error during fetching temperature data for Berlin</Alert>}\n        {londonQuery.isError && <Alert severity='error'>Error during fetching temperature data for London</Alert>}\n        <Grid container alignItems='center' spacing={3} justifyContent='space-evenly'>\n            <Grid item xs={12} lg={4}>\n                {myLocationQuery.isLoading || geo.isLoading ? <Skeleton animation=\"wave\" height={64} /> : <LookupWeatherCard locationLabel=\"My Location\" temp={myLocationQuery?.data?.main?.temp} to='/location' />}\n            </Grid>\n            <Grid item xs={12} lg={4}>\n                {berlinQuery.isLoading ? <Skeleton animation=\"wave\" height={64} /> : <LookupWeatherCard locationLabel=\"Berlin\" temp={berlinQuery?.data?.main?.temp} to='/location/Berlin' />}\n            </Grid>\n            <Grid item xs={12} lg={4}>\n                {londonQuery.isLoading ? <Skeleton animation=\"wave\" height={64} /> : <LookupWeatherCard locationLabel=\"London\" temp={londonQuery?.data?.main?.temp} to='/location/London' />}\n            </Grid>\n        </Grid>\n    </>)\n}\n\nexport default Dashboard;","import { Typography } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport React from \"react\";\n\ninterface TemperatureDetailsProps{\n    isLoading: boolean,\n    isError: boolean\n    weatherKind?: string[],\n    highTemp?: number,\n    lowTemp?: number,\n    temp?: number\n}\n\nconst TemperatureDetails = (props: TemperatureDetailsProps)=>{\n    return (<>\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \n        <Typography variant='subtitle1' align='center'>\n            {props.isError ? '--' : (props.weatherKind.length && props.weatherKind.reduce((a,b)=>`${a},${b}`))??'--'}\n        </Typography>}\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \n        <Typography variant='h5' align='center'>\n                {props.isError ? '--':props.temp?.toFixed(0)??'--'} °C\n        </Typography>}\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \n        <Typography variant='h6' align='center'>\n            H:{props.isError ? '--':props.highTemp?.toFixed(0)??'--'}°C&nbsp;L:{props.isError ? '--':props.lowTemp?.toFixed(0)??'--'}°C\n        </Typography>\n        }\n    </>)}\n\nexport default TemperatureDetails","import { Typography } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\ninterface WeatherDataAndDescriptionProps {\n    description: string\n    data: string\n    isLoading: boolean\n}\n\nconst WeatherDataAndDescription = (props: WeatherDataAndDescriptionProps) => {\n    return <>\n        <Typography variant='subtitle1' align='center'>\n            {props.description}\n        </Typography>\n        {props.isLoading ?<Skeleton animation='wave' height={50}/>:<Typography variant=\"h6\" align='center'>\n            {props.data}\n        </Typography>}\n    </>\n}\n\nexport default WeatherDataAndDescription;","import { makeStyles } from \"@material-ui/core\";\nimport { ClassesBaseType } from \"../theme/ClassesBaseType\";\n\nconst useTypedStyles =<TClasses extends ClassesBaseType>(styleDef : TClasses)=>{\n    return makeStyles(styleDef)() as Record<keyof ReturnType<TClasses>, string>\n}\n\nexport default useTypedStyles;","import { Theme } from \"@material-ui/core\";\n\nexport const basicClasses = (theme: Theme) => ({\n    root: {\n        backgroundColor: 'transparent',\n        boxShadow: 'none',\n    },\n    rightSeparationBorder: {\n        borderRight: 'solid',\n        borderRightWidth: '0.5px',\n        borderColor: theme.palette.type === 'dark' ? 'rgba(150, 150, 150, 0.12)' : 'rgba(100, 100, 100, 0.12)'\n    },\n    bottomSeparationBorder: {\n        borderBottom: 'solid',\n        borderBottomWidth: '0.5px',\n        borderColor: theme.palette.type === 'dark' ? 'rgba(150, 150, 150, 0.12)' : 'rgba(100, 100, 100, 0.12)'\n    },\n    marginTopCentering: {\n        marginTop: '12px'\n    }\n})","import { Grid } from \"@material-ui/core\";\nimport WeatherDataAndDescription from \"./WeatherDataAndDescription\";\nimport { addSeconds } from 'date-fns'\nimport useTypedStyles from \"../hooks/useTypedStyles\";\nimport { basicClasses } from \"../theme/basicClasses\";\n\ninterface WeatherDetailsProps {\n    isError: boolean\n    isLoading: boolean\n    sunrise?: number\n    sunset?: number\n    humidity?: number\n    visibility?: number\n    timezone?: number\n}\n\nconst WeatherDetails = (props: WeatherDetailsProps) => {\n    const format_time = (utc_timestamp: number, timezone: number) => {\n        const dtFormat = new Intl.DateTimeFormat('pl-PL', {\n            timeStyle: 'short',\n            timeZone: 'UTC'\n        });\n        return dtFormat.format(addSeconds(new Date(utc_timestamp * 1e3), timezone));\n    }\n    const classes = useTypedStyles(basicClasses);\n    return <><Grid container alignItems='center' spacing={3} justifyContent='space-evenly' className={classes.bottomSeparationBorder}>\n        <Grid item xs={6}\n            className={classes.rightSeparationBorder}\n        >\n            <WeatherDataAndDescription\n                description=\"Sunrise\"\n                isLoading={props.isLoading}\n                data={props.isError || props.isLoading ? '--:--' : format_time(props.sunrise ?? 0, props.timezone ?? 0)}\n            />\n        </Grid>\n        <Grid item xs={6}>\n            <WeatherDataAndDescription\n                description=\"Sunset\"\n                isLoading={props.isLoading}\n                data={props.isError || props.isLoading ? '--:--' : format_time(props.sunset ?? 0, props.timezone ?? 0)}\n            />\n        </Grid>\n    </Grid>\n        <Grid container alignItems='center' spacing={3} justifyContent='space-evenly' className={classes.marginTopCentering}>\n            <Grid item xs={6} className={classes.rightSeparationBorder}>\n                <WeatherDataAndDescription\n                    description=\"Humidity\"\n                    isLoading={props.isLoading}\n                    data={props.isError || props.isLoading ? '--.-- %' : `${props.humidity.toFixed(0)} %`}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                <WeatherDataAndDescription\n                    description=\"Visibility\"\n                    isLoading={props.isLoading}\n                    data={props.isError || props.isLoading ? '--.-- km' : `${(props.visibility / 1000).toFixed(2)} km`}\n                />\n            </Grid>\n        </Grid>\n    </>\n}\n\nexport default WeatherDetails;","import { Grid } from \"@material-ui/core\";\nimport TemperatureDetails from \"./TemperatureDetails\";\nimport WeatherDetails from \"./WeatherDetails\";\n\n\ninterface LocationViewBodyProps {\n    isError: boolean\n    isLoading: boolean\n    temp?: number\n    highTemp?: number\n    lowTemp?: number\n    weatherKind?: string[]\n\n    sunrise?: number\n    sunset?: number\n    humidity?: number\n    visibility?: number,\n    timezone?: number\n}\n\n\nconst LocationViewBody = (props: LocationViewBodyProps) => {\n\n    return <Grid container alignItems='center' spacing={3} justifyContent='space-evenly'>\n        <Grid item xs={12} lg={6}>\n            <TemperatureDetails\n                {...props}\n            />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n            <WeatherDetails\n                {...props}\n            />\n        </Grid>\n    </Grid>\n}\n\nexport default LocationViewBody;","import { IconButton, Grid, Typography } from \"@material-ui/core\";\nimport { ArrowBackIos } from \"@material-ui/icons\";\nimport { Link } from \"react-router-dom\";\ninterface LocationBarProps {\n    label: string\n}\nconst LocationBar = (props: LocationBarProps) => {\n    return <Grid container>\n        <Grid item xs={1}>\n            <IconButton\n                component={Link} to='/'\n            >\n                <ArrowBackIos />\n            </IconButton>\n        </Grid>\n        <Grid item xs={10}>\n            <Typography variant='h5' align='center'>\n                {props.label}\n            </Typography>\n        </Grid>\n    </Grid>\n}\nexport default LocationBar;","import { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\nimport { Helmet } from \"react-helmet\";\nimport {\n    useParams\n} from \"react-router-dom\";\nimport { Alert } from \"@material-ui/lab\";\nimport LocationViewBody from \"../../components/LocationViewBody\";\nimport LocationBar from \"../../components/LocationBar\";\nimport { useFetchQuery } from \"../../hooks/useFetchQuery\";\n\nconst LocationDetails = () => {\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n    const { cityName } = useParams();\n    const query = useFetchQuery<WeatherDataModel>(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric`);\n\n    const data = query.data;\n    return <>  <Helmet>\n        <title>Weather in {cityName}</title>\n    </Helmet>\n        <LocationBar label={cityName}/>\n        {query.isError && <Alert severity='error'>Error during fetching temperature data for {cityName}</Alert>}\n        <LocationViewBody\n            isError={query.isError}\n            isLoading={query.isLoading}\n            timezone={data?.timezone}\n            temp={data?.main.temp}\n            highTemp={data?.main?.temp_max}\n            lowTemp={data?.main?.temp_min}\n            weatherKind={data?.weather?.map(x => x.main)}\n            sunrise={data?.sys?.sunrise}\n            sunset={data?.sys?.sunset}\n            humidity={data?.main?.humidity}\n            visibility={data?.visibility}\n        />\n    </>\n}\n\nexport default LocationDetails;","import { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\nimport { useGeoLocation } from \"../../hooks/useGeoLocation\";\nimport { Alert } from \"@material-ui/lab\";\nimport LocationBar from \"../../components/LocationBar\";\nimport LocationViewBody from \"../../components/LocationViewBody\";\nimport { GeoLocationStatusEnum } from \"../../enums/GeoLocationStatusEnum\";\nimport { useFetchQuery } from \"../../hooks/useFetchQuery\";\n\nconst MyLocationDetails = ()=>{\n    const geo = useGeoLocation();\n\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n    const query = useFetchQuery<WeatherDataModel>(`https://api.openweathermap.org/data/2.5/weather?lat=${geo.location.latitude}&lon=${geo.location.longitude}&units=metric&appid=${apiKey}`, {\n            enabled: !geo.isLoading && geo.status === GeoLocationStatusEnum.Success\n        })\n\n    const data = query.data;\n\n    return <>\n     <LocationBar label=\"My Location\"/>\n        {GeoLocationStatusEnum.ErrorUserOrDeviceRejection === geo.status && <Alert severity='error'>Turn on location in your browser to see weather result for your city</Alert>}\n        {GeoLocationStatusEnum.ErrorLocationIsNotAvailableInBrowser === geo.status && <Alert severity='error'>Location api is not available in your current browser application may don't work properly</Alert>}\n        {query.isError && <Alert severity='error'>Error during fetching temperature data for your location</Alert>}\n       <LocationViewBody\n        isError={query.isError || [GeoLocationStatusEnum.ErrorLocationIsNotAvailableInBrowser, GeoLocationStatusEnum.ErrorUserOrDeviceRejection].includes(geo.status)}\n        timezone={data?.timezone}\n        isLoading={query.isLoading || geo.isLoading}\n        temp={data?.main.temp}\n        highTemp={data?.main?.temp_max}\n        lowTemp={data?.main?.temp_min}\n        weatherKind={data?.weather?.map(x => x.main)}\n        sunrise={data?.sys?.sunrise}\n        sunset={data?.sys?.sunset}\n        humidity={data?.main?.humidity}\n        visibility={data?.visibility}\n       />\n    </>\n}\n\nexport default MyLocationDetails;","import React, { useEffect, useMemo } from 'react';\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport Error404 from './pages/error/Error404';\nimport Main from './pages/main/Main';\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport LocationDetails from './pages/location/LocationDetails';\nimport MyLocationDetails from './pages/location/MyLocationDetails';\nimport { GeoLocationContext, useSetupLocationContextValues } from './contexts/GeoLocationContext';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createTheme, Paper, ThemeProvider } from '@material-ui/core';\nimport useTypedStyles from './hooks/useTypedStyles';\nimport { basicClasses } from './theme/basicClasses';\n\nconst client = new QueryClient({\n    defaultOptions: {\n        queries: {\n            cacheTime: 60 * 1000,\n            staleTime: 30 * 1000\n        }\n    }\n})\n\nfunction App() {\n    const Path = (props: { children?: React.ReactNode, title: string, path: string, exact?: boolean }) =>\n        <Route path={props.path} exact={props.exact}>\n            <Helmet>\n                <title>{props.title}</title>\n            </Helmet>\n            {props.children}\n        </Route>\n\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    useEffect(() => {\n        /*body element is outside react dom so there is no way to reference it by react*/\n        document.getElementsByTagName('body')[0].style.backgroundColor = prefersDarkMode ? 'black' : 'white'\n    }, [prefersDarkMode]);\n\n    const theme = useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    type: prefersDarkMode ? 'dark' : 'light',\n                },\n            }),\n        [prefersDarkMode],\n    );\n\n    const geoLocationContextValues = useSetupLocationContextValues()\n\n    const classes = useTypedStyles(basicClasses);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Paper className={classes.root}>\n                <GeoLocationContext.Provider value={geoLocationContextValues}>\n                    <QueryClientProvider client={client}>\n                            <Switch>\n                                <Path exact path=\"/location\" title=\"Weather in my location\">\n                                    <MyLocationDetails />\n                                </Path>\n                                <Route exact path=\"/location/:cityName\">\n                                    <LocationDetails />\n                                </Route>\n                                <Path exact path=\"/\" title=\"Wheater Forecasting Service\">\n                                    <Main />\n                                </Path>\n                                <Path path=\"*\" title=\"404 page not found\">\n                                    <Error404 />\n                                </Path>\n                            </Switch>\n                    </QueryClientProvider>\n                </GeoLocationContext.Provider>\n            </Paper>\n        </ThemeProvider>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {\n    HashRouter as Router\n} from \"react-router-dom\";\nReactDOM.render(\n    <Router basename=\"/\">\n        <App />\n    </Router>,\n  document.getElementById('root')\n);"],"sourceRoot":""}