{"version":3,"sources":["enums/GeoLocationStatusEnum.ts","pages/error/Error404.tsx","components/LookupWeatherCard.tsx","contexts/GeoLocationContext.ts","hooks/useGeoLocation.ts","fetch/fetchResourceThrowOnError.ts","hooks/useFetchQuery.ts","hooks/useTypedStyles.ts","theme/basicClasses.ts","components/SpaceAfterAppBar.tsx","pages/main/Main.tsx","hooks/useFetchQueries.ts","components/TemperatureDetails.tsx","components/WeatherDataAndDescription.tsx","components/WeatherDetails.tsx","components/LocationViewBody.tsx","components/LocationBar.tsx","pages/location/LocationDetails.tsx","pages/location/MyLocationDetails.tsx","App.tsx","index.tsx"],"names":["GeoLocationStatusEnum","Error404","Typography","variant","align","LookupWeatherCard","props","Card","CardActionArea","component","Link","to","CardContent","Grid","container","item","xs","locationLabel","temp","toFixed","geoLocationInitialValues","status","Undefined","isLoading","location","latitude","longitude","alreadyRequested","setAlreadyRequested","setLocation","setIsLoading","setStatus","GeoLocationContext","React","createContext","useGeoLocation","geo","useContext","navigator","geolocation","getCurrentPosition","position","coords","Success","ErrorUserOrDeviceRejection","ErrorLocationIsNotAvailableInBrowser","fetchResocureThrowOnError","resocure","fetch","then","res","ok","json","Error","useFetchQuery","options","useQuery","useTypedStyles","styleDef","makeStyles","basicClasses","theme","spaceAfterAppBar","height","width","verticalCenteredContent","margin","top","transform","weatherDataCard","root","backgroundColor","boxShadow","rightSeparationBorder","borderRight","borderRightWidth","borderColor","palette","type","bottomSeparationBorder","borderBottom","borderBottomWidth","marginTopCentering","marginTop","SpaceAfterAppBar","classes","className","Dashboard","resocures","defaultCities","apiKey","process","cityQueries","map","city","useQueries","queryKey","queryFn","myLocationQuery","enabled","AppBar","Alert","severity","isError","index","alignItems","spacing","justifyContent","lg","Skeleton","animation","data","main","TemperatureDetails","weatherKind","length","reduce","a","b","highTemp","lowTemp","WeatherDataAndDescription","description","WeatherDetails","format_time","utc_timestamp","timezone","Intl","DateTimeFormat","timeStyle","timeZone","format","addSeconds","Date","sunrise","sunset","humidity","visibility","LocationViewBody","LocationBar","IconButton","size","ArrowBackIos","label","LocationDetails","cityName","useParams","query","Helmet","temp_max","temp_min","weather","x","sys","MyLocationDetails","includes","client","QueryClient","defaultOptions","queries","cacheTime","staleTime","App","Path","path","exact","title","children","prefersDarkMode","useMediaQuery","useEffect","document","getElementsByTagName","style","useMemo","createTheme","geoLocationContextValues","useState","useSetupLocationContextValues","ThemeProvider","Paper","Provider","value","QueryClientProvider","Main","ReactDOM","render","basename","getElementById"],"mappings":"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","file":"static/js/main.49a12653.chunk.js","sourcesContent":["export enum GeoLocationStatusEnum{\n    Undefined = 0,\n    Success = 1,\n    ErrorUserOrDeviceRejection = 2,\n    ErrorLocationIsNotAvailableInBrowser = 3\n}","import { Typography } from '@material-ui/core';\nconst Error404 =() => {\n    return (\n        <>\n        <Typography variant=\"h2\" align=\"center\">404</Typography>\n        <Typography variant=\"h4\" align=\"center\">Page not found</Typography>\n        </>\n    )\n};\nexport default Error404;","import { Card, CardActionArea, CardContent, Grid, Typography } from \"@material-ui/core\";\nimport {\n    Link\n} from \"react-router-dom\";\n\ninterface LookupWeatherCardProps {\n    locationLabel: string\n    temp?: number\n    to: string\n}\n\nconst LookupWeatherCard = (props: LookupWeatherCardProps) => {\n    return <Card>\n        <CardActionArea component={Link} to={props.to}>\n        <CardContent>\n        <Grid container>\n            <Grid item xs={6}>\n                <Typography variant=\"h6\" align='left'>{props.locationLabel}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <Typography variant=\"h6\" align='right'>{props.temp?.toFixed(0)??'-'}°C</Typography>\n            </Grid>\n        </Grid>\n        </CardContent>\n        </CardActionArea>\n    </Card>\n}\n\nexport default LookupWeatherCard;","import React, { useState } from \"react\";\nimport { GeoLocationStatusEnum } from \"../enums/GeoLocationStatusEnum\";\n\nexport const geoLocationInitialValues = {\n        status: GeoLocationStatusEnum.Undefined,\n        isLoading: true,\n        location:{latitude:0, longitude:0 },\n        alreadyRequested: false,\n        setAlreadyRequested: (alreadyRequested: boolean)=> {},\n        setLocation:(location: {latitude:number, longitude:number })=>{},\n        setIsLoading: (isLoading: boolean)=>{},\n        setStatus:(status: GeoLocationStatusEnum)=>{}\n    }\n\nexport const useSetupLocationContextValues=  ()=>{\n    const [status, setStatus] = useState(geoLocationInitialValues.status)\n    const [location, setLocation] = useState(geoLocationInitialValues.location);\n    const [isLoading, setIsLoading] = useState(geoLocationInitialValues.isLoading);\n    const [alreadyRequested, setAlreadyRequested] = useState(geoLocationInitialValues.alreadyRequested);\n    return { status, setStatus, setIsLoading, setLocation, isLoading, location, alreadyRequested, setAlreadyRequested }\n}\n\nexport const GeoLocationContext = React.createContext(geoLocationInitialValues);","import { useContext } from \"react\";\nimport { GeoLocationContext } from \"../contexts/GeoLocationContext\";\nimport { GeoLocationStatusEnum } from \"../enums/GeoLocationStatusEnum\";\n\nexport function useGeoLocation(){\n    const geo = useContext(GeoLocationContext)\n    if(!geo.alreadyRequested && navigator.geolocation) navigator.geolocation.getCurrentPosition(\n        position=>{\n            geo.setAlreadyRequested(true)\n            geo.setLocation({ latitude: position.coords.latitude, longitude: position.coords.longitude})\n            geo.setIsLoading(false);\n            geo.setStatus(GeoLocationStatusEnum.Success);\n        },\n        ()=> {\n            geo.setAlreadyRequested(true);\n            geo.setStatus(GeoLocationStatusEnum.ErrorUserOrDeviceRejection)\n        }\n    );\n    if(!navigator.geolocation)\n    {\n        geo.setStatus(GeoLocationStatusEnum.ErrorLocationIsNotAvailableInBrowser);\n        geo.setIsLoading(false);\n        geo.setAlreadyRequested(true);\n    }\n    return { status: geo.status, location: geo.location, isLoading:geo.isLoading}\n}","export const fetchResocureThrowOnError = (resocure: string) => \n{\n    return fetch(resocure).then(res => {\n        if(res.ok)\n            return res.json()\n        throw new Error(\"api fetch was unsuccesfull\")\n        })\n}","import { QueryKey, useQuery, UseQueryOptions } from \"react-query\"\nimport { fetchResocureThrowOnError } from \"../fetch/fetchResourceThrowOnError\"\n\nexport const useFetchQuery = <T>(resocure: string, options?: UseQueryOptions<T, unknown,T, QueryKey>)=> useQuery<T>(resocure, ()=> fetchResocureThrowOnError(resocure), options)","import { makeStyles } from \"@material-ui/core\";\nimport { ClassesBaseType } from \"../theme/ClassesBaseType\";\n\nconst useTypedStyles =<TClasses extends ClassesBaseType>(styleDef : TClasses)=>{\n    return makeStyles(styleDef)() as Record<keyof ReturnType<TClasses>, string>\n}\n\nexport default useTypedStyles;","import { Theme } from \"@material-ui/core\";\n\nexport const basicClasses = (theme: Theme) => ({\n    spaceAfterAppBar: {\n        height: '40px',\n        width: '100%'\n    },\n    verticalCenteredContent:{\n        margin: 0,\n        position: 'absolute',\n        width:'calc(100% - 32px)',\n        top: '50%',\n        transform: 'translateY(-50%)'\n    },\n    weatherDataCard:{\n        position: 'relative',\n        height: '37vh'\n    },\n    root: {\n        backgroundColor: 'transparent',\n        boxShadow: 'none',\n    },\n    rightSeparationBorder: {\n        borderRight: 'solid',\n        borderRightWidth: '0.5px',\n        borderColor: theme.palette.type === 'dark' ? 'rgba(150, 150, 150, 0.12)' : 'rgba(100, 100, 100, 0.12)'\n    },\n    bottomSeparationBorder: {\n        borderBottom: 'solid',\n        borderBottomWidth: '0.5px',\n        borderColor: theme.palette.type === 'dark' ? 'rgba(150, 150, 150, 0.12)' : 'rgba(100, 100, 100, 0.12)'\n    },\n    marginTopCentering: {\n        marginTop: '12px'\n    }\n})","import useTypedStyles from \"../hooks/useTypedStyles\";\nimport { basicClasses } from \"../theme/basicClasses\";\n\nexport const SpaceAfterAppBar =()=>{\n    const classes = useTypedStyles(basicClasses);\n    return <div className={classes.spaceAfterAppBar}/>\n}","import { AppBar, Grid, Typography } from \"@material-ui/core\"\nimport { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\nimport LookupWeatherCard from \"../../components/LookupWeatherCard\";\nimport { useGeoLocation } from \"../../hooks/useGeoLocation\"\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Alert from '@material-ui/lab/Alert';\nimport { useFetchQuery } from \"../../hooks/useFetchQuery\";\nimport { GeoLocationStatusEnum } from \"../../enums/GeoLocationStatusEnum\";\nimport { useFetchQueries } from \"../../hooks/useFetchQueries\";\nimport { SpaceAfterAppBar } from \"../../components/SpaceAfterAppBar\";\n\nconst Dashboard = () => {\n    const geo = useGeoLocation();\n\n    const defaultCities = [\"Berlin\", \"London\"];\n\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n\n    const cityQueries = useFetchQueries<WeatherDataModel>(defaultCities.map(city=>`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`))\n\n    const myLocationQuery = useFetchQuery<WeatherDataModel>(`https://api.openweathermap.org/data/2.5/weather?lat=${geo.location.latitude}&lon=${geo.location.longitude}&units=metric&appid=${apiKey}`, {\n        enabled: !geo.isLoading && geo.status === GeoLocationStatusEnum.Success\n    })\n\n    return (<>\n        <AppBar>\n        <Typography variant='h5' align='center'>\n            Dashboard\n        </Typography>\n        </AppBar>\n        <SpaceAfterAppBar />\n        {GeoLocationStatusEnum.ErrorUserOrDeviceRejection === geo.status && <Alert severity='error'>Turn on location in your browser to see weather result for your city</Alert>}\n        {GeoLocationStatusEnum.ErrorLocationIsNotAvailableInBrowser === geo.status && <Alert severity='error'>Location api is not available in your current browser application may don't work properly</Alert>}\n        {myLocationQuery.isError && <Alert severity='error'>Error during fetching temperature data for your location</Alert>}\n        {defaultCities.map((city, index)=>cityQueries[index].isError && <Alert severity='error' key={city}>Error during fetching temperature data for {city}</Alert>)}\n        <Grid container alignItems='center' spacing={3} justifyContent='space-evenly'>\n            <Grid item xs={12} lg={4}>\n                {myLocationQuery.isLoading || geo.isLoading ? <Skeleton animation=\"wave\" height={64} /> : <LookupWeatherCard locationLabel=\"My Location\" temp={myLocationQuery?.data?.main?.temp} to='/location' />}\n            </Grid>\n            {defaultCities.map((city, index)=><Grid item xs={12} lg={4} key={city}>\n                {cityQueries[index].isLoading ? <Skeleton animation=\"wave\" height={64} /> : <LookupWeatherCard locationLabel={city} temp={cityQueries[index].data?.main?.temp} to={`/location/${city}`} />}\n            </Grid> )}\n        </Grid>\n    </>)\n}\n\nexport default Dashboard;","import { QueryKey, useQueries, UseQueryOptions, UseQueryResult } from \"react-query\"\nimport { fetchResocureThrowOnError } from \"../fetch/fetchResourceThrowOnError\"\n\nexport const useFetchQueries = <T>(resocures: string[], options?: UseQueryOptions<T, unknown,T, QueryKey>) : UseQueryResult<T>[]=> useQueries(resocures.map(resocure=>({\n    queryKey: [resocure],\n    queryFn: () => fetchResocureThrowOnError(resocure),\n}))) as UseQueryResult<T>[]","import { CardContent, Typography, Card } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport React from \"react\";\nimport useTypedStyles from \"../hooks/useTypedStyles\";\nimport { basicClasses } from \"../theme/basicClasses\";\n\ninterface TemperatureDetailsProps{\n    isLoading: boolean,\n    isError: boolean\n    weatherKind?: string[],\n    highTemp?: number,\n    lowTemp?: number,\n    temp?: number\n}\n\nconst TemperatureDetails = (props: TemperatureDetailsProps)=>{\n    const classes = useTypedStyles(basicClasses);\n    return (<Card className={classes.weatherDataCard}>\n        <CardContent>\n            <div className={classes.verticalCenteredContent}>\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \n        <Typography variant='subtitle1' align='center'>\n            {props.isError ? '--' : (props.weatherKind?.length && props.weatherKind.reduce((a,b)=>`${a},${b}`))??'--'}\n        </Typography>}\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \n        <Typography variant='h5' align='center'>\n                {props.isError ? '--':props.temp?.toFixed(0)??'--'} °C\n        </Typography>}\n        {props.isLoading ? <Skeleton animation=\"wave\" height={50}/> : \n        <Typography variant='h6' align='center'>\n            H:{props.isError ? '--':props.highTemp?.toFixed(0)??'--'}°C&nbsp;L:{props.isError ? '--':props.lowTemp?.toFixed(0)??'--'}°C\n        </Typography>\n        }\n        </div>\n        </CardContent>\n    </Card>)}\n\nexport default TemperatureDetails","import { Typography } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\n\ninterface WeatherDataAndDescriptionProps {\n    description: string\n    data: string\n    isLoading: boolean\n}\n\nconst WeatherDataAndDescription = (props: WeatherDataAndDescriptionProps) => {\n    return <>\n        <Typography variant='subtitle1' align='center'>\n            {props.description}\n        </Typography>\n        {props.isLoading ?<Skeleton animation='wave' height={50}/>:<Typography variant=\"h6\" align='center'>\n            {props.data}\n        </Typography>}\n    </>\n}\n\nexport default WeatherDataAndDescription;","import { Card, CardContent, Grid } from \"@material-ui/core\";\nimport WeatherDataAndDescription from \"./WeatherDataAndDescription\";\nimport { addSeconds } from 'date-fns'\nimport useTypedStyles from \"../hooks/useTypedStyles\";\nimport { basicClasses } from \"../theme/basicClasses\";\n\ninterface WeatherDetailsProps {\n    isError: boolean\n    isLoading: boolean\n    sunrise?: number\n    sunset?: number\n    humidity?: number\n    visibility?: number\n    timezone?: number\n}\n\nconst WeatherDetails = (props: WeatherDetailsProps) => {\n    const format_time = (utc_timestamp: number, timezone: number) => {\n        const dtFormat = new Intl.DateTimeFormat('pl-PL', {\n            timeStyle: 'short',\n            timeZone: 'UTC'\n        });\n        return dtFormat.format(addSeconds(new Date(utc_timestamp * 1e3), timezone));\n    }\n    const classes = useTypedStyles(basicClasses);\n    return <Card className={classes.weatherDataCard}>\n        <CardContent>\n            <div className={classes.verticalCenteredContent}>\n                <Grid container alignItems='center' spacing={3} justifyContent='space-evenly' className={classes.bottomSeparationBorder}>\n                    <Grid item xs={6}\n                        className={classes.rightSeparationBorder}\n                    >\n                        <WeatherDataAndDescription\n                            description=\"Sunrise\"\n                            isLoading={props.isLoading}\n                            data={props.isError || props.isLoading ? '--:--' : format_time(props.sunrise ?? 0, props.timezone ?? 0)}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <WeatherDataAndDescription\n                            description=\"Sunset\"\n                            isLoading={props.isLoading}\n                            data={props.isError || props.isLoading ? '--:--' : format_time(props.sunset ?? 0, props.timezone ?? 0)}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container alignItems='center' spacing={3} justifyContent='space-evenly' className={classes.marginTopCentering}>\n                    <Grid item xs={6} className={classes.rightSeparationBorder}>\n                        <WeatherDataAndDescription\n                            description=\"Humidity\"\n                            isLoading={props.isLoading}\n                            data={props.isError || props.isLoading ? '--.-- %' : `${props.humidity?.toFixed(0)} %`}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <WeatherDataAndDescription\n                            description=\"Visibility\"\n                            isLoading={props.isLoading}\n                            data={props.isError || props.isLoading ? '--.-- km' : `${((props.visibility ?? 0) / 1000).toFixed(2)} km`}\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        </CardContent>\n    </Card>\n}\n\nexport default WeatherDetails;","import { Grid } from \"@material-ui/core\";\nimport TemperatureDetails from \"./TemperatureDetails\";\nimport WeatherDetails from \"./WeatherDetails\";\n\n\ninterface LocationViewBodyProps {\n    isError: boolean\n    isLoading: boolean\n    temp?: number\n    highTemp?: number\n    lowTemp?: number\n    weatherKind?: string[]\n\n    sunrise?: number\n    sunset?: number\n    humidity?: number\n    visibility?: number,\n    timezone?: number\n}\n\n\nconst LocationViewBody = (props: LocationViewBodyProps) => {\n\n    return <Grid container alignItems='center' spacing={3} justifyContent='space-evenly'>\n        <Grid item xs={12} lg={6}>\n            <TemperatureDetails\n                {...props}\n            />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n            <WeatherDetails\n                {...props}\n            />\n        </Grid>\n    </Grid>\n}\n\nexport default LocationViewBody;","import { IconButton, Grid, Typography, AppBar } from \"@material-ui/core\";\nimport { ArrowBackIos } from \"@material-ui/icons\";\nimport { Link } from \"react-router-dom\";\ninterface LocationBarProps {\n    label: string\n}\nconst LocationBar = (props: LocationBarProps) => {\n    return <AppBar><Grid container>\n        <Grid item xs={1}>\n            <IconButton\n                component={Link} to='/'\n                size='small'\n            >\n                <ArrowBackIos />\n            </IconButton>\n        </Grid>\n        <Grid item xs={10}>\n            <Typography variant='h5' align='center'>\n                {props.label}\n            </Typography>\n        </Grid>\n    </Grid>\n    </AppBar>\n}\nexport default LocationBar;","import { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\nimport { Helmet } from \"react-helmet\";\nimport {\n    useParams\n} from \"react-router-dom\";\nimport { Alert } from \"@material-ui/lab\";\nimport LocationViewBody from \"../../components/LocationViewBody\";\nimport LocationBar from \"../../components/LocationBar\";\nimport { useFetchQuery } from \"../../hooks/useFetchQuery\";\nimport { SpaceAfterAppBar } from \"../../components/SpaceAfterAppBar\";\n\nconst LocationDetails = () => {\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n    const { cityName } = useParams();\n    const query = useFetchQuery<WeatherDataModel>(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric`);\n\n    const data = query.data;\n    return <>  <Helmet>\n        <title>Weather in {cityName}</title>\n    </Helmet>\n        <LocationBar label={cityName}/>\n        <SpaceAfterAppBar />\n        {query.isError && <Alert severity='error'>Error during fetching temperature data for {cityName}</Alert>}\n        <LocationViewBody\n            isError={query.isError}\n            isLoading={query.isLoading}\n            timezone={data?.timezone}\n            temp={data?.main.temp}\n            highTemp={data?.main?.temp_max}\n            lowTemp={data?.main?.temp_min}\n            weatherKind={data?.weather?.map(x => x.main)}\n            sunrise={data?.sys?.sunrise}\n            sunset={data?.sys?.sunset}\n            humidity={data?.main?.humidity}\n            visibility={data?.visibility}\n        />\n    </>\n}\n\nexport default LocationDetails;","import { WeatherDataModel } from \"../../apiModels/openweather/WheaterDataModel\";\nimport { useGeoLocation } from \"../../hooks/useGeoLocation\";\nimport { Alert } from \"@material-ui/lab\";\nimport LocationBar from \"../../components/LocationBar\";\nimport LocationViewBody from \"../../components/LocationViewBody\";\nimport { GeoLocationStatusEnum } from \"../../enums/GeoLocationStatusEnum\";\nimport { useFetchQuery } from \"../../hooks/useFetchQuery\";\nimport { SpaceAfterAppBar } from \"../../components/SpaceAfterAppBar\";\n\nconst MyLocationDetails = ()=>{\n    const geo = useGeoLocation();\n\n    const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n    const query = useFetchQuery<WeatherDataModel>(`https://api.openweathermap.org/data/2.5/weather?lat=${geo.location.latitude}&lon=${geo.location.longitude}&units=metric&appid=${apiKey}`, {\n            enabled: !geo.isLoading && geo.status === GeoLocationStatusEnum.Success\n        })\n\n    const data = query.data;\n\n    return <>\n     <LocationBar label=\"My Location\"/>\n     <SpaceAfterAppBar/>\n        {GeoLocationStatusEnum.ErrorUserOrDeviceRejection === geo.status && <Alert severity='error'>Turn on location in your browser to see weather result for your city</Alert>}\n        {GeoLocationStatusEnum.ErrorLocationIsNotAvailableInBrowser === geo.status && <Alert severity='error'>Location api is not available in your current browser application may don't work properly</Alert>}\n        {query.isError && <Alert severity='error'>Error during fetching temperature data for your location</Alert>}\n       <LocationViewBody\n        isError={query.isError || [GeoLocationStatusEnum.ErrorLocationIsNotAvailableInBrowser, GeoLocationStatusEnum.ErrorUserOrDeviceRejection].includes(geo.status)}\n        timezone={data?.timezone}\n        isLoading={query.isLoading || geo.isLoading}\n        temp={data?.main.temp}\n        highTemp={data?.main?.temp_max}\n        lowTemp={data?.main?.temp_min}\n        weatherKind={data?.weather?.map(x => x.main)}\n        sunrise={data?.sys?.sunrise}\n        sunset={data?.sys?.sunset}\n        humidity={data?.main?.humidity}\n        visibility={data?.visibility}\n       />\n    </>\n}\n\nexport default MyLocationDetails;","import React, { useEffect, useMemo } from 'react';\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport Error404 from './pages/error/Error404';\nimport Main from './pages/main/Main';\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport LocationDetails from './pages/location/LocationDetails';\nimport MyLocationDetails from './pages/location/MyLocationDetails';\nimport { GeoLocationContext, useSetupLocationContextValues } from './contexts/GeoLocationContext';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createTheme, Paper, ThemeProvider } from '@material-ui/core';\nimport useTypedStyles from './hooks/useTypedStyles';\nimport { basicClasses } from './theme/basicClasses';\n\nconst client = new QueryClient({\n    defaultOptions: {\n        queries: {\n            cacheTime: 60 * 1000,\n            staleTime: 30 * 1000\n        }\n    }\n})\n\nfunction App() {\n    const Path = (props: { children?: React.ReactNode, title: string, path: string, exact?: boolean }) =>\n        <Route path={props.path} exact={props.exact}>\n            <Helmet>\n                <title>{props.title}</title>\n            </Helmet>\n            {props.children}\n        </Route>\n\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    useEffect(() => {\n        /*body element is outside react dom so there is no way to reference it by react*/\n        document.getElementsByTagName('body')[0].style.backgroundColor = prefersDarkMode ? 'black' : 'white'\n    }, [prefersDarkMode]);\n\n    const theme = useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    type: prefersDarkMode ? 'dark' : 'light',\n                },\n            }),\n        [prefersDarkMode],\n    );\n\n    const geoLocationContextValues = useSetupLocationContextValues()\n\n    const classes = useTypedStyles(basicClasses);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Paper className={classes.root}>\n                <GeoLocationContext.Provider value={geoLocationContextValues}>\n                    <QueryClientProvider client={client}>\n                            <Switch>\n                                <Path exact path=\"/location\" title=\"Weather in my location\">\n                                    <MyLocationDetails />\n                                </Path>\n                                <Route exact path=\"/location/:cityName\">\n                                    <LocationDetails />\n                                </Route>\n                                <Path exact path=\"/\" title=\"Wheater Forecasting Service\">\n                                    <Main />\n                                </Path>\n                                <Path path=\"*\" title=\"404 page not found\">\n                                    <Error404 />\n                                </Path>\n                            </Switch>\n                    </QueryClientProvider>\n                </GeoLocationContext.Provider>\n            </Paper>\n        </ThemeProvider>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {\n    HashRouter as Router\n} from \"react-router-dom\";\nReactDOM.render(\n    <Router basename=\"/\">\n        <App />\n    </Router>,\n  document.getElementById('root')\n);"],"sourceRoot":""}